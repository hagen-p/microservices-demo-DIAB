plugins {
    id 'com.google.protobuf' version '0.8.11'
    id 'com.github.sherter.google-java-format' version '0.8'
    id 'idea'
    id 'application'
    //id 'com.ryandens.javaagent-application' version "0.2.1"
}

repositories {
    mavenCentral()
    mavenLocal()
}

description = 'Ad Service'
group = "adservice"
version = "0.1.1-SNAPSHOT"

def grpcVersion = "1.52.1"
def protocVersion = "3.21.12"

tasks.withType(JavaCompile) {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

ext {
    speed = project.hasProperty('speed') ? project.getProperty('speed') : false
    offlineCompile = new File("$buildDir/output/lib")
}

dependencies {
    if (speed) {
        implementation fileTree(dir: offlineCompile, include: '*.jar')
    } else {
        implementation "com.google.api.grpc:proto-google-common-protos:1.17.0",
                "io.grpc:grpc-protobuf:${grpcVersion}",
                "io.grpc:grpc-stub:${grpcVersion}",
                "io.grpc:grpc-netty:${grpcVersion}",
                "io.grpc:grpc-services:${grpcVersion}",
                "javax.annotation:javax.annotation-api:1.3.2",
                "org.apache.logging.log4j:log4j-core:2.17.1"

        runtimeOnly "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}",
                "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}",
                "io.netty:netty-tcnative-boringssl-static:2.0.43.Final"

 //       javaagent "com.splunk:splunk-otel-javaagent:1.11.0:all"
    }
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:${protocVersion}"
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
        ofSourceSet('main')
    }
}

googleJavaFormat {
    toolVersion '1.7'
}

// Inform IDEs like IntelliJ IDEA, Eclipse or NetBeans about the generated code.
sourceSets {
    main {
        java {
            srcDirs 'hipstershop'
            srcDirs 'build/generated/source/proto/main/java/hipstershop'
            srcDirs 'build/generated/source/proto/main/grpc/hipstershop'
        }
    }
}

application {
    mainClassName = 'hipstershop.AdService'
    applicationName = 'AdService'
    applicationDefaultJvmArgs = [
        "-Dotel.service.name=adservice",
        "-Dsplunk.profiler.enabled=true",
        "-Dsplunk.profiler.period.threaddump=1000"
    ]
}

// This to cache dependencies during Docker image building. First build will take time.
// Subsequent build will be incremental.
task downloadRepos(type: Copy) {
    from configurations.compile
    into offlineCompile
    from configurations.runtime
    into offlineCompile
}

task adServiceClient(type: CreateStartScripts) {
    mainClassName = 'hipstershop.AdServiceClient'
    applicationName = 'AdServiceClient'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = startScripts.classpath
}

applicationDistribution.into('bin') {
    from(adServiceClient)
    fileMode = 0755
}
